Q1
revenue=127804.31
cogs=96321.56
gs=0
gs=((revenue-cogs)/revenue)*100
print(gs)

Q2
vendors = [
  {'name': 'Vendor 1', 'revenue': 6912.74, 'costs': 5357.15},
    {'name': 'Vendor 2', 'revenue': 6704.47, 'costs': 5407.49},
    {'name': 'Vendor 3', 'revenue': 23138.27, 'costs': 16767.6},
    {'name': 'Vendor 4', 'revenue': 27255.22, 'costs': 20351.91},
    {'name': 'Vendor 5', 'revenue': 7489.760, 'costs': 5873.62},
    {'name': 'Vendor 6', 'revenue': 5487.87, 'costs': 4269.92},
    {'name': 'Vendor 7', 'revenue': 21789.76, 'costs': 16828.71},
    {'name': 'Vendor 8', 'revenue': 1393.84, 'costs': 1140.1},
    {'name': 'Vendor 9', 'revenue': 16191.75, 'costs': 11925.05},
    {'name': 'Vendor 10', 'revenue': 11440.63,'costs': 8400.01},
]
for vendor in vendors:
    vendor['profit'] = vendor['revenue'] - vendor['costs']

profitable_vendor = max(vendors, key=lambda x: x['profit'])

print(f"The most profitable vendor is {profitable_vendor['name']} with a profit of {profitable_vendor['profit']}")

Q3
customer=max(5310.57,844.83,736.55,1528.8,1273.27,1735.22,875.45,5791.64,1337.88,2713.96)
print("Customer who is the least profitable is customer8",customer)

Q4,Q5
data = [
    {"date": "21/08/23", "vendor": "Vendor6", "customer": "Customer7", "revenue": 4029.52, "cogs": 3172.84},
    # ... (all other data entries)
    {"date": "27/08/23", "vendor": "", "customer": "", "revenue": 5173.93, "cogs": 96321.56}
]

from datetime import datetime

day_profits = {}
for entry in data:
    date_string = entry["date"]
    date_object = datetime.strptime(date_string, "%d/%m/%y")
    day_of_week = date_object.strftime("%A")
    profit = entry["revenue"] - entry["cogs"]
    day_profits[day_of_week] = day_profits.get(day_of_week, 0) + profit

most_profitable_day = max(day_profits, key=day_profits.get)
least_profitable_day = min(day_profits, key=day_profits.get)
print("Most profitable day of the week: {}".format(most_profitable_day))

print("Least profitable day of the week: {}".format(least_profitable_day))

Q6.Calculate 3-day average of daily gross profit
import pandas as pd

# Load the data from the CSV file
data = pd.read_csv("sales_data_2.csv")

# Convert the 'Date' column to datetime type
data['Date'] = pd.to_datetime(data['Date'])

# Calculate daily gross profit
data['Gross Profit'] = (data['Selling price'] - data['Buying price']) * data['Quantity sold']

# Calculate 3-day rolling average of daily gross profit
data['3-day Average Gross Profit'] = data.groupby('Date')['Gross Profit'].rolling(window=3, min_periods=1).mean().reset_index(0, drop=True)

# Print 3-day average of daily gross profit
print(data[['Date', '3-day Average Gross Profit']])

7.Analyze the 3-day trend changes over the time period
# Calculate total profit per vendor and customer
vendor_profit = data.groupby('Firm bought from')['Gross Profit'].sum()
customer_profit = data.groupby('Customer')['Gross Profit'].sum()

# Identify vendors and customers with low profitability
low_profit_vendors = vendor_profit[vendor_profit < vendor_profit.median()]
low_profit_customers = customer_profit[customer_profit < customer_profit.median()
print("Low Profit Vendors:")
print(low_profit_vendors)
print("\nLow Profit Customers:")
print(low_profit_customers)




Q8,Q9.Calculate percentiles for buying and selling prices
# Calculate percentiles for buying and selling prices
buying_price_percentiles = data['Buying price'].describe(percentiles=[0.25, 0.50, 0.75])
selling_price_percentiles = data['Selling price'].describe(percentiles=[0.25, 0.50, 0.75])

print("Buying Price Percentiles:")
print(buying_price_percentiles[['25%', '50%', '75%']])
print("\nSelling Price Percentiles:")
print(selling_price_percentiles[['25%', '50%', '75%']])


Q10.Analyze price distribution against percentiles
# Check how often prices fall below 25th percentile or above 75th percentile
below_25th_percentile = data[data['Selling price'] < selling_price_percentiles['25%']]
above_75th_percentile = data[data['Selling price'] > selling_price_percentiles['75%']]

print("Number of transactions with selling price below 25th percentile:", len(below_25th_percentile))
print("Number of transactions with selling price above 75th percentile:", len(above_75th_percentile))



Q11-Bharath says that Vendor 4 has to be honored.  What impact does it have on your optimal gross margin? 

# Assuming Vendor 4's profit margin is 20% (you can replace this with the actual profit margin)
vendor_4_profit_margin = 0.20

# Recalculate gross profit including Vendor 4's products
data['Gross Profit with Vendor 4'] = (data['Selling price'] - data['Buying price']) * data['Quantity sold']
total_gross_profit_with_vendor_4 = data[data['Firm bought from'] == 'Vendor 4']['Gross Profit with Vendor 4'].sum()

# Calculate total sales with Vendor 4's products
total_sales_with_vendor_4 = data[data['Firm bought from'] == 'Vendor 4']['Selling price'].sum()

# Calculate the impact on gross margin
previous_gross_margin = (total_gross_profit / total_sales) * 100
new_gross_margin_with_vendor_4 = ((total_gross_profit + total_gross_profit_with_vendor_4) / (total_sales + total_sales_with_vendor_4)) * 100

# Compare the previous gross margin with the new one
print(f"Previous Gross Margin: {previous_gross_margin:.2f}%")
print(f"New Gross Margin with Vendor 4: {new_gross_margin_with_vendor_4:.2f}%")
print(f"Difference in Gross Margin: {new_gross_margin_with_vendor_4 - previous_gross_margin:.2f}%")

The statement "Vendor 4 has to be honored" implies that you must fulfill your obligations or commitments to Vendor 4, which typically involves paying them for the products or services they've provided. This is a contractual or business obligation that you need to meet.
The impact of honoring Vendor 4 on your optimal gross margin depends on several factors:
Cost of Goods Sold (COGS): If honoring Vendor 4 requires purchasing goods or services from them at a certain cost, it will affect your Cost of Goods Sold (COGS). COGS is a key component in calculating gross margin. If Vendor 4 offers favorable terms or competitive prices, it may positively impact your gross margin.


Q12-Which vendor should we have a strategic tie up so that we source only from them (the goal here is to have the highest gross margin)
    - What’s the theoretical max margin the firm could have from that branch?

# Calculate profit margin for each vendor
for vendor in vendors:
    vendor['profit_margin'] = vendor['profit'] / vendor['revenue']

# Find the vendor with the highest profit margin
strategic_vendor = max(vendors, key=lambda x: x['profit_margin'])

# Calculate the theoretical maximum gross margin
theoretical_max_margin = strategic_vendor['profit_margin'] * 100

print(f"The vendor with the highest profit margin is {strategic_vendor['name']} with a profit margin of {strategic_vendor['profit_margin']:.2f}")
print(f"The theoretical maximum gross margin from this vendor is {theoretical_max_margin:.2f}%")

The vendor the company should tie up should posses low COGS,quality and reliability,supplier exclusivity,demand and price power, long term partnership, supplychain efficiency, market conditions, economies of scale.
Gross Margin= ((Selling Price-COGS)/ Selling price) ×100%
So, we choose vendor 6 for a strategic tie-up with the goal of achieving the highest gross margin involves several considerations. 
The theoretical max margin the firm could have from that branch is 68.69072 % by vendor 6.

Q13
If you increase the price of Sapota by Rs. 1, and the quantity demanded decreases by, for example, 2%, you would have a percentage change in price (
P) of +1% and a percentage change in quantity demanded (
Q) of -2%.
If you decrease the price of Sapota by Rs. 1, and the quantity demanded increases by, for example, 3%, you would have a percentage change in price (
P) of -1% and a percentage change in quantity demanded (
Q) of +3%.
Using these values, you can calculate the price elasticity of Sapota for that branch as follows:
Price Elasticity of Sapota=% Change in Quantity Demanded / % Change in Price
Price Elasticity of Sapota= % Change in Price/ % Change in Quantity Demanded
?
Price Elasticity of Sapota=-2% /1% 
=-2
Price Elasticity of Sapota= 1%/ -2%
?=-2

This would mean that the price elasticity of Sapota for that branch is -2. In practical terms, a price elasticity of -2 suggests that Sapota is relatively inelastic, meaning that changes in its price have a smaller effect on the quantity demanded. A 1% increase in price leads to a 2% decrease in quantity demanded, and a 1% decrease in price leads to a 2% increase in quantity demanded. In other words, consumers are less responsive to price changes for Sapota in this branch.

